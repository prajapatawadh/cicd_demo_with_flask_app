name: Build and deploy using docker   
on: 
  push:
    branches: [master]

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to aws ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build tag and push the image to amazon ecr 
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
        ECR_REPOSITORY: flask_repo
      run: |
        docker build -t $ECR_REGISTRY/$ECR-REPOSITORY:$GITHUB_SHA .
        docker push -t $ECR_REGISTRY/$ECR-REPOSITORY:$GITHUB_SHA

    - name: Deploy on EC2
      env:
        PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
        HOST_NAME: ${{ secrets.HOST_NAME }}
        USER_NAME: ${{ secrets.USER_NAME }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ls
        sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' ${{ gitHub.workspace }}/docker-compose.yml
        sed -i -e 's/ECR_REGISTRY/'"$ECR_REGISTRY"'/' ${{ gitHub.workspace }}/docker-compose.yml
        ssh -o StrictHostKeyChecking=no -i private_key ${{ gitHub.workspace }}/docker-compose.yml ${USER_NAME}@${HOST_NAME} "
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "

        cd /tmp
        docker-compose -p backend-flask up -d
                